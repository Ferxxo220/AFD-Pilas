package Pila;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

/**
 *
 * @author steph
 */
public class Ejercicio2 {
     static class Transition {
        String nextState;
        String popStack;
        String pushStack;
 
        public Transition(String nextState, String popStack, String pushStack) {
            this.nextState = nextState;
            this.popStack = popStack;
            this.pushStack = pushStack;
        }
    }
 
    private Map<String, Transition> transitions = new HashMap<>();
    private String initialState = "q0";
    private Set<String> finalStates = new HashSet<>(List.of("qf"));
 
    public Ejercicio2() {
 
        // Transiciones:
        transitions.put("q0,a,B", new Transition("q0", "B", "BB"));
        transitions.put("q0,b,A", new Transition("q0", "A", "AA"));
        transitions.put("q0,a,A", new Transition("q0", "A", "AZ"));
        transitions.put("q0,b,A", new Transition("q0", "A", "BA"));
        transitions.put("q0,c,B", new Transition("q1", "B", "ε"));
        transitions.put("q1,c,B", new Transition("q1", "c", "ε"));
        transitions.put("q1,d,A", new Transition("q2", "A", "ε"));
        transitions.put("q2,d,A", new Transition("q2", "A", "ε"));
        transitions.put("q2,ε,Z", new Transition("q3", "Z", "Z"));
 
 
    }
 
    public boolean validate(String input) {
        Stack<String> stack = new Stack<>();
        stack.push("Z");
        String currentState = initialState;
        int index = 0;
 
 
        while (index <= input.length()) {
            String symbol = (index < input.length()) ? String.valueOf(input.charAt(index)) : "ε";
            String stackTop = stack.isEmpty() ? "ε" : stack.peek();
 
            String key = currentState + "," + symbol + "," + stackTop;
            Transition t = transitions.get(key);
 
            if (t == null) {
                // Intenta ε-transición si existe
                key = currentState + ",ε," + stackTop;
                t = transitions.get(key);
                if (t == null) return false;
            } else {
                index++; // avanza en el input solo si usó un símbolo real
            }
 
            // Aplica transición
            if (!t.popStack.equals("ε") && !stack.isEmpty()) {
                stack.pop();
            }
            if (!t.pushStack.equals("ε") && !t.pushStack.equals("")) {
                for (int i = t.pushStack.length() - 1; i >= 0; i--) {
                    stack.push(String.valueOf(t.pushStack.charAt(i)));
                }
            }
 
            currentState = t.nextState;
        }
 
        return finalStates.contains(currentState) && (stack.peek().equals("Z"));
    }
 
    public static void main(String[] args) {
        Ejercicio2 pda = new Ejercicio2();
 
        String[] testStrings = {"abd"};
 
        for (String s : testStrings) {
            boolean result = pda.validate(s);
            System.out.println("Input: " + s + " => " + (result ? "Cadena Aceptada" : "Cadena Rechazada"));
        }
    }
}
